// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package scc

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Lib_OVMCodecChainBatchHeader is an auto generated low-level Go binding around an user-defined struct.
type Lib_OVMCodecChainBatchHeader struct {
	BatchIndex        *big.Int
	BatchRoot         [32]byte
	BatchSize         *big.Int
	PrevTotalElements *big.Int
	ExtraData         []byte
}

// Lib_OVMCodecChainInclusionProof is an auto generated low-level Go binding around an user-defined struct.
type Lib_OVMCodecChainInclusionProof struct {
	Index    *big.Int
	Siblings [][32]byte
}

// SccMetaData contains all meta data concerning the Scc contract.
var SccMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libAddressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fraudProofWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sequencerPublishWindow\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prevTotalElements\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"StateBatchAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchRoot\",\"type\":\"bytes32\"}],\"name\":\"StateBatchDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchRoot\",\"type\":\"bytes32\"}],\"name\":\"StateBatchFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_batchRoot\",\"type\":\"bytes32\"}],\"name\":\"StateBatchVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FRAUD_PROOF_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEQUENCER_PUBLISH_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_batch\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_shouldStartAtElement\",\"type\":\"uint256\"}],\"name\":\"appendStateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"contractIChainStorageContainer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_OVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"}],\"name\":\"deleteStateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_OVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"}],\"name\":\"failVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastSequencerTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastSequencerTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBatches\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalElements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalElements\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_OVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"}],\"name\":\"insideFraudProofWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_inside\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libAddressManager\",\"outputs\":[{\"internalType\":\"contractLib_AddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_OVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"}],\"name\":\"succeedVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_element\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"structLib_OVMCodec.ChainBatchHeader\",\"name\":\"_batchHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLib_OVMCodec.ChainInclusionProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"verifyStateCommitment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200338a3803806200338a83398181016040528101906200003791906200013b565b82828282806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816001819055508060028190555050505050505062000197565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000c8826200009b565b9050919050565b620000da81620000bb565b8114620000e657600080fd5b50565b600081519050620000fa81620000cf565b92915050565b6000819050919050565b620001158162000100565b81146200012157600080fd5b50565b60008151905062000135816200010a565b92915050565b60008060006060848603121562000157576200015662000096565b5b60006200016786828701620000e9565b93505060206200017a8682870162000124565b92505060406200018d8682870162000124565b9150509250925092565b6131e380620001a76000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80639418bddd11610097578063cfdf677e11610066578063cfdf677e14610274578063e0c2b41814610292578063e561dddc146102ae578063fc7e9c6f146102cc576100f5565b80639418bddd146101ee5780639594dd641461021e578063b8e189ac1461023a578063c17b291b14610256576100f5565b80637aa63a86116100d35780637aa63a86146101785780637ad168a01461019657806381eb62ef146101b45780638ca5cbb9146101d2576100f5565b8063299ca478146100fa578063461a4478146101185780634d69ee5714610148575b600080fd5b6101026102ea565b60405161010f9190611aa6565b60405180910390f35b610132600480360381019061012d9190611c1b565b61030e565b60405161013f9190611c85565b60405180910390f35b610162600480360381019061015d9190611f93565b6103c1565b60405161016f9190612039565b60405180910390f35b610180610472565b60405161018d9190612063565b60405180910390f35b61019e61048e565b6040516101ab9190612063565b60405180910390f35b6101bc6104aa565b6040516101c99190612063565b60405180910390f35b6101ec60048036038101906101e7919061207e565b6104b0565b005b610208600480360381019061020391906120da565b610781565b6040516102159190612039565b60405180910390f35b610238600480360381019061023391906120da565b610814565b005b610254600480360381019061024f91906120da565b610972565b005b61025e610ab9565b60405161026b9190612063565b60405180910390f35b61027c610abf565b6040516102899190612144565b60405180910390f35b6102ac60048036038101906102a791906120da565b610ae7565b005b6102b6610c54565b6040516102c39190612063565b60405180910390f35b6102d4610ce0565b6040516102e19190612063565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf40fac1836040518263ffffffff1660e01b815260040161036a91906121e7565b60206040518083038186803b15801561038257600080fd5b505afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190612235565b9050919050565b60006103cc83610ce6565b61040b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610402906122ae565b60405180910390fd5b610428836020015185846000015185602001518760400151610d8d565b610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e9061231a565b60405180910390fd5b600190509392505050565b60008061047d610f34565b5090508064ffffffffff1691505090565b600080610499610f34565b9150508064ffffffffff1691505090565b60025481565b6104b8610472565b81146104f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f0906123ac565b60405180910390fd5b6105376040518060400160405280600b81526020017f426f6e644d616e6167657200000000000000000000000000000000000000000081525061030e565b73ffffffffffffffffffffffffffffffffffffffff166302ad4d2a336040518263ffffffff1660e01b815260040161056f9190611c85565b60206040518083038186803b15801561058757600080fd5b505afa15801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf91906123f8565b6105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590612497565b60405180910390fd5b6000825111610642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063990612529565b60405180910390fd5b6106806040518060400160405280601981526020017f43616e6f6e6963616c5472616e73616374696f6e436861696e0000000000000081525061030e565b73ffffffffffffffffffffffffffffffffffffffff16637aa63a866040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd919061255e565b8251610707610472565b61071191906125ba565b1115610752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610749906126a8565b60405180910390fd5b61077d8242336040516020016107699291906126c8565b604051602081830303815290604052611008565b5050565b60006003548260000151101561079a576000905061080f565b600082608001518060200190518101906107b4919061272f565b50905060008114156107fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f2906127e1565b60405180910390fd5b426001548261080a91906125ba565b119150505b919050565b73520000000000000000000000000000000000001473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088d9061284d565b60405180910390fd5b61089f81610ce6565b6108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d5906122ae565b60405180910390fd5b6108e781610781565b610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d906128df565b60405180910390fd5b61092f81611220565b80600001517f1723478079cff2362bd8896c78c4c8bee974428fc01131b52d79078349af3e108260200151604051610967919061290e565b60405180910390a250565b6109b06040518060400160405280601181526020017f4f564d5f4672617564566572696669657200000000000000000000000000000081525061030e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a149061299b565b60405180910390fd5b610a2681610ce6565b610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906122ae565b60405180910390fd5b610a6e81610781565b610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa4906128df565b60405180910390fd5b610ab681611220565b50565b60015481565b6000610ae260405180606001604052806021815260200161318d6021913961030e565b905090565b73520000000000000000000000000000000000001473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b609061284d565b60405180910390fd5b610b7281610ce6565b610bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba8906122ae565b60405180910390fd5b600354816000015114610bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf090612a07565b60405180910390fd5b60036000815480929190610c0c90612a27565b919050555080600001517fc032f530357a4853a125c129880b7801f1f30fb46fdd0e2f3bbc6e053199dca98260200151604051610c49919061290e565b60405180910390a250565b6000610c5e610abf565b73ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb919061255e565b905090565b60035481565b6000610cf0610abf565b73ffffffffffffffffffffffffffffffffffffffff16639507d39a83600001516040518263ffffffff1660e01b8152600401610d2c9190612063565b60206040518083038186803b158015610d4457600080fd5b505afa158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612a85565b610d85836113fb565b149050919050565b6000808211610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc890612b24565b60405180910390fd5b818410610e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0a90612bb6565b60405180910390fd5b610e1c82611441565b835114610e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5590612c6e565b60405180910390fd5b600085905060005b8451811015610f245760018087161415610ec457848181518110610e8d57610e8c612c8e565b5b602002602001015182604051602001610ea7929190612cde565b604051602081830303815290604052805190602001209150610f0a565b81858281518110610ed857610ed7612c8e565b5b6020026020010151604051602001610ef1929190612cde565b6040516020818303038152906040528051906020012091505b600186901c95508080610f1c90612a27565b915050610e66565b5080871491505095945050505050565b6000806000610f41610abf565b73ffffffffffffffffffffffffffffffffffffffff1663ccf8f9696040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190612d62565b90506000808260281c925064ffffffffff831691507fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000831660281c90508181945094505050509091565b60006110486040518060400160405280600c81526020017f4f564d5f50726f706f736572000000000000000000000000000000000000000081525061030e565b9050600080611055610f34565b915091508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611095574290506110ec565b426002548264ffffffffff166110ab91906125ba565b106110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e290612e27565b60405180910390fd5b5b60006040518060a00160405280611101610c54565b815260200161110f88611511565b8152602001875181526020018464ffffffffff16815260200186815250905080600001517f16be4c5129a4e03cf3350262e181dc02ddfb4a6008d925368c0899fcd97ca9c582602001518360400151846060015185608001516040516111789493929190612e9c565b60405180910390a2611188610abf565b73ffffffffffffffffffffffffffffffffffffffff16632015276c6111ac836113fb565b6111c9846040015185606001516111c391906125ba565b86611a09565b6040518363ffffffff1660e01b81526004016111e6929190612ef7565b600060405180830381600087803b15801561120057600080fd5b505af1158015611214573d6000803e3d6000fd5b50505050505050505050565b611228610abf565b73ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b815260040160206040518083038186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a5919061255e565b8160000151106112ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e190612a07565b60405180910390fd5b6112f381610ce6565b611332576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611329906122ae565b60405180910390fd5b61133a610abf565b73ffffffffffffffffffffffffffffffffffffffff1663167fd681826000015161136984606001516000611a09565b6040518363ffffffff1660e01b8152600401611386929190612f20565b600060405180830381600087803b1580156113a057600080fd5b505af11580156113b4573d6000803e3d6000fd5b5050505080600001517f8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd6482602001516040516113f0919061290e565b60405180910390a250565b600081602001518260400151836060015184608001516040516020016114249493929190612e9c565b604051602081830303815290604052805190602001209050919050565b6000808211611485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147c90612fbb565b60405180910390fd5b6001821415611497576000905061150c565b6000829050600080608090505b600181106114ea576000816001836001901b6114c09190612fdb565b901b8416146114de5780826114d591906125ba565b91508083901c92505b600181901c90506114a4565b5083816001901b146115065760018161150391906125ba565b90505b80925050505b919050565b600080825111611556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154d90613081565b60405180910390fd5b600182511415611583578160008151811061157457611573612c8e565b5b60200260200101519050611a04565b60006040518061020001604052807f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381526020017f633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d81526020017f890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d81526020017f3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd881526020017fecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da81526020017fdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da581526020017f617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d781526020017f292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead81526020017fe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e1081526020017f7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f8281526020017fe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e8363651681526020017f3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c81526020017fad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e81526020017fa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab81526020017f4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c86281526020017f2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf1081525090506000604067ffffffffffffffff81111561180e5761180d611af0565b5b6040519080825280601f01601f1916602001820160405280156118405781602001600182028036833780820191505090505b509050600080600086519050600080805b60018411156119dd5760028461186791906130d0565b915060016002856118789190613101565b14905060005b8281101561192a578a8160026118949190613132565b815181106118a5576118a4612c8e565b5b602002602001015196508a60018260026118bf9190613132565b6118c991906125ba565b815181106118da576118d9612c8e565b5b6020026020010151955086602089015285604089015287805190602001208b828151811061190b5761190a612c8e565b5b602002602001018181525050808061192290612a27565b91505061187e565b5080156119ab578960018561193f9190612fdb565b815181106119505761194f612c8e565b5b6020026020010151955087836010811061196d5761196c612c8e565b5b602002015160001b945085602088015284604088015286805190602001208a838151811061199e5761199d612c8e565b5b6020026020010181815250505b806119b75760006119ba565b60015b60ff16826119c891906125ba565b935082806119d590612a27565b935050611851565b896000815181106119f1576119f0612c8e565b5b6020026020010151985050505050505050505b919050565b6000808390508260281b811790508060281b90508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611a6c611a67611a6284611a27565b611a47565b611a27565b9050919050565b6000611a7e82611a51565b9050919050565b6000611a9082611a73565b9050919050565b611aa081611a85565b82525050565b6000602082019050611abb6000830184611a97565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b2882611adf565b810181811067ffffffffffffffff82111715611b4757611b46611af0565b5b80604052505050565b6000611b5a611ac1565b9050611b668282611b1f565b919050565b600067ffffffffffffffff821115611b8657611b85611af0565b5b611b8f82611adf565b9050602081019050919050565b82818337600083830152505050565b6000611bbe611bb984611b6b565b611b50565b905082815260208101848484011115611bda57611bd9611ada565b5b611be5848285611b9c565b509392505050565b600082601f830112611c0257611c01611ad5565b5b8135611c12848260208601611bab565b91505092915050565b600060208284031215611c3157611c30611acb565b5b600082013567ffffffffffffffff811115611c4f57611c4e611ad0565b5b611c5b84828501611bed565b91505092915050565b6000611c6f82611a27565b9050919050565b611c7f81611c64565b82525050565b6000602082019050611c9a6000830184611c76565b92915050565b6000819050919050565b611cb381611ca0565b8114611cbe57600080fd5b50565b600081359050611cd081611caa565b92915050565b600080fd5b600080fd5b6000819050919050565b611cf381611ce0565b8114611cfe57600080fd5b50565b600081359050611d1081611cea565b92915050565b600067ffffffffffffffff821115611d3157611d30611af0565b5b611d3a82611adf565b9050602081019050919050565b6000611d5a611d5584611d16565b611b50565b905082815260208101848484011115611d7657611d75611ada565b5b611d81848285611b9c565b509392505050565b600082601f830112611d9e57611d9d611ad5565b5b8135611dae848260208601611d47565b91505092915050565b600060a08284031215611dcd57611dcc611cd6565b5b611dd760a0611b50565b90506000611de784828501611d01565b6000830152506020611dfb84828501611cc1565b6020830152506040611e0f84828501611d01565b6040830152506060611e2384828501611d01565b606083015250608082013567ffffffffffffffff811115611e4757611e46611cdb565b5b611e5384828501611d89565b60808301525092915050565b600067ffffffffffffffff821115611e7a57611e79611af0565b5b602082029050602081019050919050565b600080fd5b6000611ea3611e9e84611e5f565b611b50565b90508083825260208201905060208402830185811115611ec657611ec5611e8b565b5b835b81811015611eef5780611edb8882611cc1565b845260208401935050602081019050611ec8565b5050509392505050565b600082601f830112611f0e57611f0d611ad5565b5b8135611f1e848260208601611e90565b91505092915050565b600060408284031215611f3d57611f3c611cd6565b5b611f476040611b50565b90506000611f5784828501611d01565b600083015250602082013567ffffffffffffffff811115611f7b57611f7a611cdb565b5b611f8784828501611ef9565b60208301525092915050565b600080600060608486031215611fac57611fab611acb565b5b6000611fba86828701611cc1565b935050602084013567ffffffffffffffff811115611fdb57611fda611ad0565b5b611fe786828701611db7565b925050604084013567ffffffffffffffff81111561200857612007611ad0565b5b61201486828701611f27565b9150509250925092565b60008115159050919050565b6120338161201e565b82525050565b600060208201905061204e600083018461202a565b92915050565b61205d81611ce0565b82525050565b60006020820190506120786000830184612054565b92915050565b6000806040838503121561209557612094611acb565b5b600083013567ffffffffffffffff8111156120b3576120b2611ad0565b5b6120bf85828601611ef9565b92505060206120d085828601611d01565b9150509250929050565b6000602082840312156120f0576120ef611acb565b5b600082013567ffffffffffffffff81111561210e5761210d611ad0565b5b61211a84828501611db7565b91505092915050565b600061212e82611a73565b9050919050565b61213e81612123565b82525050565b60006020820190506121596000830184612135565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561219957808201518184015260208101905061217e565b838111156121a8576000848401525b50505050565b60006121b98261215f565b6121c3818561216a565b93506121d381856020860161217b565b6121dc81611adf565b840191505092915050565b6000602082019050818103600083015261220181846121ae565b905092915050565b61221281611c64565b811461221d57600080fd5b50565b60008151905061222f81612209565b92915050565b60006020828403121561224b5761224a611acb565b5b600061225984828501612220565b91505092915050565b7f496e76616c6964206261746368206865616465722e0000000000000000000000600082015250565b600061229860158361216a565b91506122a382612262565b602082019050919050565b600060208201905081810360008301526122c78161228b565b9050919050565b7f496e76616c696420696e636c7573696f6e2070726f6f662e0000000000000000600082015250565b600061230460188361216a565b915061230f826122ce565b602082019050919050565b60006020820190508181036000830152612333816122f7565b9050919050565b7f41637475616c20626174636820737461727420696e64657820646f6573206e6f60008201527f74206d6174636820657870656374656420737461727420696e6465782e000000602082015250565b6000612396603d8361216a565b91506123a18261233a565b604082019050919050565b600060208201905081810360008301526123c581612389565b9050919050565b6123d58161201e565b81146123e057600080fd5b50565b6000815190506123f2816123cc565b92915050565b60006020828403121561240e5761240d611acb565b5b600061241c848285016123e3565b91505092915050565b7f50726f706f73657220646f6573206e6f74206861766520656e6f75676820636f60008201527f6c6c61746572616c20706f737465640000000000000000000000000000000000602082015250565b6000612481602f8361216a565b915061248c82612425565b604082019050919050565b600060208201905081810360008301526124b081612474565b9050919050565b7f43616e6e6f74207375626d697420616e20656d7074792073746174652062617460008201527f63682e0000000000000000000000000000000000000000000000000000000000602082015250565b600061251360238361216a565b915061251e826124b7565b604082019050919050565b6000602082019050818103600083015261254281612506565b9050919050565b60008151905061255881611cea565b92915050565b60006020828403121561257457612573611acb565b5b600061258284828501612549565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125c582611ce0565b91506125d083611ce0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126055761260461258b565b5b828201905092915050565b7f4e756d626572206f6620737461746520726f6f74732063616e6e6f742065786360008201527f65656420746865206e756d626572206f662063616e6f6e6963616c207472616e60208201527f73616374696f6e732e0000000000000000000000000000000000000000000000604082015250565b600061269260498361216a565b915061269d82612610565b606082019050919050565b600060208201905081810360008301526126c181612685565b9050919050565b60006040820190506126dd6000830185612054565b6126ea6020830184611c76565b9392505050565b60006126fc82611a27565b9050919050565b61270c816126f1565b811461271757600080fd5b50565b60008151905061272981612703565b92915050565b6000806040838503121561274657612745611acb565b5b600061275485828601612549565b92505060206127658582860161271a565b9150509250929050565b7f4261746368206865616465722074696d657374616d702063616e6e6f7420626560008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006127cb60258361216a565b91506127d68261276f565b604082019050919050565b600060208201905081810360008301526127fa816127be565b9050919050565b7f496e76616c6964206d6573736167652073656e6465722e000000000000000000600082015250565b600061283760178361216a565b915061284282612801565b602082019050919050565b600060208201905081810360008301526128668161282a565b9050919050565b7f537461746520626174636865732063616e206f6e6c792062652064656c65746560008201527f642077697468696e207468652066726175642070726f6f662077696e646f772e602082015250565b60006128c960408361216a565b91506128d48261286d565b604082019050919050565b600060208201905081810360008301526128f8816128bc565b9050919050565b61290881611ca0565b82525050565b600060208201905061292360008301846128ff565b92915050565b7f537461746520626174636865732063616e206f6e6c792062652064656c65746560008201527f6420627920746865204f564d5f467261756456657269666965722e0000000000602082015250565b6000612985603b8361216a565b915061299082612929565b604082019050919050565b600060208201905081810360008301526129b481612978565b9050919050565b7f496e76616c696420626174636820696e6465782e000000000000000000000000600082015250565b60006129f160148361216a565b91506129fc826129bb565b602082019050919050565b60006020820190508181036000830152612a20816129e4565b9050919050565b6000612a3282611ce0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a6557612a6461258b565b5b600182019050919050565b600081519050612a7f81611caa565b92915050565b600060208284031215612a9b57612a9a611acb565b5b6000612aa984828501612a70565b91505092915050565b7f4c69625f4d65726b6c65547265653a20546f74616c206c6561766573206d757360008201527f742062652067726561746572207468616e207a65726f2e000000000000000000602082015250565b6000612b0e60378361216a565b9150612b1982612ab2565b604082019050919050565b60006020820190508181036000830152612b3d81612b01565b9050919050565b7f4c69625f4d65726b6c65547265653a20496e646578206f7574206f6620626f7560008201527f6e64732e00000000000000000000000000000000000000000000000000000000602082015250565b6000612ba060248361216a565b9150612bab82612b44565b604082019050919050565b60006020820190508181036000830152612bcf81612b93565b9050919050565b7f4c69625f4d65726b6c65547265653a20546f74616c207369626c696e6773206460008201527f6f6573206e6f7420636f72726563746c7920636f72726573706f6e6420746f2060208201527f746f74616c206c65617665732e00000000000000000000000000000000000000604082015250565b6000612c58604d8361216a565b9150612c6382612bd6565b606082019050919050565b60006020820190508181036000830152612c8781612c4b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b612cd8612cd382611ca0565b612cbd565b82525050565b6000612cea8285612cc7565b602082019150612cfa8284612cc7565b6020820191508190509392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000082169050919050565b612d3f81612d0a565b8114612d4a57600080fd5b50565b600081519050612d5c81612d36565b92915050565b600060208284031215612d7857612d77611acb565b5b6000612d8684828501612d4d565b91505092915050565b7f43616e6e6f74207075626c69736820737461746520726f6f747320776974686960008201527f6e207468652073657175656e636572207075626c69636174696f6e2077696e6460208201527f6f772e0000000000000000000000000000000000000000000000000000000000604082015250565b6000612e1160438361216a565b9150612e1c82612d8f565b606082019050919050565b60006020820190508181036000830152612e4081612e04565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612e6e82612e47565b612e788185612e52565b9350612e8881856020860161217b565b612e9181611adf565b840191505092915050565b6000608082019050612eb160008301876128ff565b612ebe6020830186612054565b612ecb6040830185612054565b8181036060830152612edd8184612e63565b905095945050505050565b612ef181612d0a565b82525050565b6000604082019050612f0c60008301856128ff565b612f196020830184612ee8565b9392505050565b6000604082019050612f356000830185612054565b612f426020830184612ee8565b9392505050565b7f4c69625f4d65726b6c65547265653a2043616e6e6f7420636f6d70757465206360008201527f65696c286c6f675f3229206f6620302e00000000000000000000000000000000602082015250565b6000612fa560308361216a565b9150612fb082612f49565b604082019050919050565b60006020820190508181036000830152612fd481612f98565b9050919050565b6000612fe682611ce0565b9150612ff183611ce0565b9250828210156130045761300361258b565b5b828203905092915050565b7f4c69625f4d65726b6c65547265653a204d7573742070726f766964652061742060008201527f6c65617374206f6e65206c65616620686173682e000000000000000000000000602082015250565b600061306b60348361216a565b91506130768261300f565b604082019050919050565b6000602082019050818103600083015261309a8161305e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130db82611ce0565b91506130e683611ce0565b9250826130f6576130f56130a1565b5b828204905092915050565b600061310c82611ce0565b915061311783611ce0565b925082613127576131266130a1565b5b828206905092915050565b600061313d82611ce0565b915061314883611ce0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131815761318061258b565b5b82820290509291505056fe436861696e53746f72616765436f6e7461696e65722d5343432d62617463686573a264697066735822122081908e137dc9b60fb110d51e290f347818c8a600c132c8b12f61d9f159bac07764736f6c63430008090033",
}

// SccABI is the input ABI used to generate the binding from.
// Deprecated: Use SccMetaData.ABI instead.
var SccABI = SccMetaData.ABI

// SccBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SccMetaData.Bin instead.
var SccBin = SccMetaData.Bin

// DeployScc deploys a new Ethereum contract, binding an instance of Scc to it.
func DeployScc(auth *bind.TransactOpts, backend bind.ContractBackend, _libAddressManager common.Address, _fraudProofWindow *big.Int, _sequencerPublishWindow *big.Int) (common.Address, *types.Transaction, *Scc, error) {
	parsed, err := SccMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SccBin), backend, _libAddressManager, _fraudProofWindow, _sequencerPublishWindow)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Scc{SccCaller: SccCaller{contract: contract}, SccTransactor: SccTransactor{contract: contract}, SccFilterer: SccFilterer{contract: contract}}, nil
}

// Scc is an auto generated Go binding around an Ethereum contract.
type Scc struct {
	SccCaller     // Read-only binding to the contract
	SccTransactor // Write-only binding to the contract
	SccFilterer   // Log filterer for contract events
}

// SccCaller is an auto generated read-only Go binding around an Ethereum contract.
type SccCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SccTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SccTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SccFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SccFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SccSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SccSession struct {
	Contract     *Scc              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SccCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SccCallerSession struct {
	Contract *SccCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SccTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SccTransactorSession struct {
	Contract     *SccTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SccRaw is an auto generated low-level Go binding around an Ethereum contract.
type SccRaw struct {
	Contract *Scc // Generic contract binding to access the raw methods on
}

// SccCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SccCallerRaw struct {
	Contract *SccCaller // Generic read-only contract binding to access the raw methods on
}

// SccTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SccTransactorRaw struct {
	Contract *SccTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScc creates a new instance of Scc, bound to a specific deployed contract.
func NewScc(address common.Address, backend bind.ContractBackend) (*Scc, error) {
	contract, err := bindScc(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Scc{SccCaller: SccCaller{contract: contract}, SccTransactor: SccTransactor{contract: contract}, SccFilterer: SccFilterer{contract: contract}}, nil
}

// NewSccCaller creates a new read-only instance of Scc, bound to a specific deployed contract.
func NewSccCaller(address common.Address, caller bind.ContractCaller) (*SccCaller, error) {
	contract, err := bindScc(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SccCaller{contract: contract}, nil
}

// NewSccTransactor creates a new write-only instance of Scc, bound to a specific deployed contract.
func NewSccTransactor(address common.Address, transactor bind.ContractTransactor) (*SccTransactor, error) {
	contract, err := bindScc(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SccTransactor{contract: contract}, nil
}

// NewSccFilterer creates a new log filterer instance of Scc, bound to a specific deployed contract.
func NewSccFilterer(address common.Address, filterer bind.ContractFilterer) (*SccFilterer, error) {
	contract, err := bindScc(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SccFilterer{contract: contract}, nil
}

// bindScc binds a generic wrapper to an already deployed contract.
func bindScc(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SccABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scc *SccRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scc.Contract.SccCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scc *SccRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scc.Contract.SccTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scc *SccRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scc.Contract.SccTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Scc *SccCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Scc.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Scc *SccTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Scc.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Scc *SccTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Scc.Contract.contract.Transact(opts, method, params...)
}

// FRAUDPROOFWINDOW is a free data retrieval call binding the contract method 0xc17b291b.
//
// Solidity: function FRAUD_PROOF_WINDOW() view returns(uint256)
func (_Scc *SccCaller) FRAUDPROOFWINDOW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "FRAUD_PROOF_WINDOW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FRAUDPROOFWINDOW is a free data retrieval call binding the contract method 0xc17b291b.
//
// Solidity: function FRAUD_PROOF_WINDOW() view returns(uint256)
func (_Scc *SccSession) FRAUDPROOFWINDOW() (*big.Int, error) {
	return _Scc.Contract.FRAUDPROOFWINDOW(&_Scc.CallOpts)
}

// FRAUDPROOFWINDOW is a free data retrieval call binding the contract method 0xc17b291b.
//
// Solidity: function FRAUD_PROOF_WINDOW() view returns(uint256)
func (_Scc *SccCallerSession) FRAUDPROOFWINDOW() (*big.Int, error) {
	return _Scc.Contract.FRAUDPROOFWINDOW(&_Scc.CallOpts)
}

// SEQUENCERPUBLISHWINDOW is a free data retrieval call binding the contract method 0x81eb62ef.
//
// Solidity: function SEQUENCER_PUBLISH_WINDOW() view returns(uint256)
func (_Scc *SccCaller) SEQUENCERPUBLISHWINDOW(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "SEQUENCER_PUBLISH_WINDOW")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SEQUENCERPUBLISHWINDOW is a free data retrieval call binding the contract method 0x81eb62ef.
//
// Solidity: function SEQUENCER_PUBLISH_WINDOW() view returns(uint256)
func (_Scc *SccSession) SEQUENCERPUBLISHWINDOW() (*big.Int, error) {
	return _Scc.Contract.SEQUENCERPUBLISHWINDOW(&_Scc.CallOpts)
}

// SEQUENCERPUBLISHWINDOW is a free data retrieval call binding the contract method 0x81eb62ef.
//
// Solidity: function SEQUENCER_PUBLISH_WINDOW() view returns(uint256)
func (_Scc *SccCallerSession) SEQUENCERPUBLISHWINDOW() (*big.Int, error) {
	return _Scc.Contract.SEQUENCERPUBLISHWINDOW(&_Scc.CallOpts)
}

// Batches is a free data retrieval call binding the contract method 0xcfdf677e.
//
// Solidity: function batches() view returns(address)
func (_Scc *SccCaller) Batches(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "batches")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Batches is a free data retrieval call binding the contract method 0xcfdf677e.
//
// Solidity: function batches() view returns(address)
func (_Scc *SccSession) Batches() (common.Address, error) {
	return _Scc.Contract.Batches(&_Scc.CallOpts)
}

// Batches is a free data retrieval call binding the contract method 0xcfdf677e.
//
// Solidity: function batches() view returns(address)
func (_Scc *SccCallerSession) Batches() (common.Address, error) {
	return _Scc.Contract.Batches(&_Scc.CallOpts)
}

// GetLastSequencerTimestamp is a free data retrieval call binding the contract method 0x7ad168a0.
//
// Solidity: function getLastSequencerTimestamp() view returns(uint256 _lastSequencerTimestamp)
func (_Scc *SccCaller) GetLastSequencerTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "getLastSequencerTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastSequencerTimestamp is a free data retrieval call binding the contract method 0x7ad168a0.
//
// Solidity: function getLastSequencerTimestamp() view returns(uint256 _lastSequencerTimestamp)
func (_Scc *SccSession) GetLastSequencerTimestamp() (*big.Int, error) {
	return _Scc.Contract.GetLastSequencerTimestamp(&_Scc.CallOpts)
}

// GetLastSequencerTimestamp is a free data retrieval call binding the contract method 0x7ad168a0.
//
// Solidity: function getLastSequencerTimestamp() view returns(uint256 _lastSequencerTimestamp)
func (_Scc *SccCallerSession) GetLastSequencerTimestamp() (*big.Int, error) {
	return _Scc.Contract.GetLastSequencerTimestamp(&_Scc.CallOpts)
}

// GetTotalBatches is a free data retrieval call binding the contract method 0xe561dddc.
//
// Solidity: function getTotalBatches() view returns(uint256 _totalBatches)
func (_Scc *SccCaller) GetTotalBatches(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "getTotalBatches")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalBatches is a free data retrieval call binding the contract method 0xe561dddc.
//
// Solidity: function getTotalBatches() view returns(uint256 _totalBatches)
func (_Scc *SccSession) GetTotalBatches() (*big.Int, error) {
	return _Scc.Contract.GetTotalBatches(&_Scc.CallOpts)
}

// GetTotalBatches is a free data retrieval call binding the contract method 0xe561dddc.
//
// Solidity: function getTotalBatches() view returns(uint256 _totalBatches)
func (_Scc *SccCallerSession) GetTotalBatches() (*big.Int, error) {
	return _Scc.Contract.GetTotalBatches(&_Scc.CallOpts)
}

// GetTotalElements is a free data retrieval call binding the contract method 0x7aa63a86.
//
// Solidity: function getTotalElements() view returns(uint256 _totalElements)
func (_Scc *SccCaller) GetTotalElements(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "getTotalElements")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalElements is a free data retrieval call binding the contract method 0x7aa63a86.
//
// Solidity: function getTotalElements() view returns(uint256 _totalElements)
func (_Scc *SccSession) GetTotalElements() (*big.Int, error) {
	return _Scc.Contract.GetTotalElements(&_Scc.CallOpts)
}

// GetTotalElements is a free data retrieval call binding the contract method 0x7aa63a86.
//
// Solidity: function getTotalElements() view returns(uint256 _totalElements)
func (_Scc *SccCallerSession) GetTotalElements() (*big.Int, error) {
	return _Scc.Contract.GetTotalElements(&_Scc.CallOpts)
}

// InsideFraudProofWindow is a free data retrieval call binding the contract method 0x9418bddd.
//
// Solidity: function insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes) _batchHeader) view returns(bool _inside)
func (_Scc *SccCaller) InsideFraudProofWindow(opts *bind.CallOpts, _batchHeader Lib_OVMCodecChainBatchHeader) (bool, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "insideFraudProofWindow", _batchHeader)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// InsideFraudProofWindow is a free data retrieval call binding the contract method 0x9418bddd.
//
// Solidity: function insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes) _batchHeader) view returns(bool _inside)
func (_Scc *SccSession) InsideFraudProofWindow(_batchHeader Lib_OVMCodecChainBatchHeader) (bool, error) {
	return _Scc.Contract.InsideFraudProofWindow(&_Scc.CallOpts, _batchHeader)
}

// InsideFraudProofWindow is a free data retrieval call binding the contract method 0x9418bddd.
//
// Solidity: function insideFraudProofWindow((uint256,bytes32,uint256,uint256,bytes) _batchHeader) view returns(bool _inside)
func (_Scc *SccCallerSession) InsideFraudProofWindow(_batchHeader Lib_OVMCodecChainBatchHeader) (bool, error) {
	return _Scc.Contract.InsideFraudProofWindow(&_Scc.CallOpts, _batchHeader)
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() view returns(address)
func (_Scc *SccCaller) LibAddressManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "libAddressManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() view returns(address)
func (_Scc *SccSession) LibAddressManager() (common.Address, error) {
	return _Scc.Contract.LibAddressManager(&_Scc.CallOpts)
}

// LibAddressManager is a free data retrieval call binding the contract method 0x299ca478.
//
// Solidity: function libAddressManager() view returns(address)
func (_Scc *SccCallerSession) LibAddressManager() (common.Address, error) {
	return _Scc.Contract.LibAddressManager(&_Scc.CallOpts)
}

// NextIndex is a free data retrieval call binding the contract method 0xfc7e9c6f.
//
// Solidity: function nextIndex() view returns(uint256)
func (_Scc *SccCaller) NextIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "nextIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextIndex is a free data retrieval call binding the contract method 0xfc7e9c6f.
//
// Solidity: function nextIndex() view returns(uint256)
func (_Scc *SccSession) NextIndex() (*big.Int, error) {
	return _Scc.Contract.NextIndex(&_Scc.CallOpts)
}

// NextIndex is a free data retrieval call binding the contract method 0xfc7e9c6f.
//
// Solidity: function nextIndex() view returns(uint256)
func (_Scc *SccCallerSession) NextIndex() (*big.Int, error) {
	return _Scc.Contract.NextIndex(&_Scc.CallOpts)
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) view returns(address)
func (_Scc *SccCaller) Resolve(opts *bind.CallOpts, _name string) (common.Address, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "resolve", _name)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) view returns(address)
func (_Scc *SccSession) Resolve(_name string) (common.Address, error) {
	return _Scc.Contract.Resolve(&_Scc.CallOpts, _name)
}

// Resolve is a free data retrieval call binding the contract method 0x461a4478.
//
// Solidity: function resolve(string _name) view returns(address)
func (_Scc *SccCallerSession) Resolve(_name string) (common.Address, error) {
	return _Scc.Contract.Resolve(&_Scc.CallOpts, _name)
}

// VerifyStateCommitment is a free data retrieval call binding the contract method 0x4d69ee57.
//
// Solidity: function verifyStateCommitment(bytes32 _element, (uint256,bytes32,uint256,uint256,bytes) _batchHeader, (uint256,bytes32[]) _proof) view returns(bool)
func (_Scc *SccCaller) VerifyStateCommitment(opts *bind.CallOpts, _element [32]byte, _batchHeader Lib_OVMCodecChainBatchHeader, _proof Lib_OVMCodecChainInclusionProof) (bool, error) {
	var out []interface{}
	err := _Scc.contract.Call(opts, &out, "verifyStateCommitment", _element, _batchHeader, _proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyStateCommitment is a free data retrieval call binding the contract method 0x4d69ee57.
//
// Solidity: function verifyStateCommitment(bytes32 _element, (uint256,bytes32,uint256,uint256,bytes) _batchHeader, (uint256,bytes32[]) _proof) view returns(bool)
func (_Scc *SccSession) VerifyStateCommitment(_element [32]byte, _batchHeader Lib_OVMCodecChainBatchHeader, _proof Lib_OVMCodecChainInclusionProof) (bool, error) {
	return _Scc.Contract.VerifyStateCommitment(&_Scc.CallOpts, _element, _batchHeader, _proof)
}

// VerifyStateCommitment is a free data retrieval call binding the contract method 0x4d69ee57.
//
// Solidity: function verifyStateCommitment(bytes32 _element, (uint256,bytes32,uint256,uint256,bytes) _batchHeader, (uint256,bytes32[]) _proof) view returns(bool)
func (_Scc *SccCallerSession) VerifyStateCommitment(_element [32]byte, _batchHeader Lib_OVMCodecChainBatchHeader, _proof Lib_OVMCodecChainInclusionProof) (bool, error) {
	return _Scc.Contract.VerifyStateCommitment(&_Scc.CallOpts, _element, _batchHeader, _proof)
}

// AppendStateBatch is a paid mutator transaction binding the contract method 0x8ca5cbb9.
//
// Solidity: function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement) returns()
func (_Scc *SccTransactor) AppendStateBatch(opts *bind.TransactOpts, _batch [][32]byte, _shouldStartAtElement *big.Int) (*types.Transaction, error) {
	return _Scc.contract.Transact(opts, "appendStateBatch", _batch, _shouldStartAtElement)
}

// AppendStateBatch is a paid mutator transaction binding the contract method 0x8ca5cbb9.
//
// Solidity: function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement) returns()
func (_Scc *SccSession) AppendStateBatch(_batch [][32]byte, _shouldStartAtElement *big.Int) (*types.Transaction, error) {
	return _Scc.Contract.AppendStateBatch(&_Scc.TransactOpts, _batch, _shouldStartAtElement)
}

// AppendStateBatch is a paid mutator transaction binding the contract method 0x8ca5cbb9.
//
// Solidity: function appendStateBatch(bytes32[] _batch, uint256 _shouldStartAtElement) returns()
func (_Scc *SccTransactorSession) AppendStateBatch(_batch [][32]byte, _shouldStartAtElement *big.Int) (*types.Transaction, error) {
	return _Scc.Contract.AppendStateBatch(&_Scc.TransactOpts, _batch, _shouldStartAtElement)
}

// DeleteStateBatch is a paid mutator transaction binding the contract method 0xb8e189ac.
//
// Solidity: function deleteStateBatch((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccTransactor) DeleteStateBatch(opts *bind.TransactOpts, _batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.contract.Transact(opts, "deleteStateBatch", _batchHeader)
}

// DeleteStateBatch is a paid mutator transaction binding the contract method 0xb8e189ac.
//
// Solidity: function deleteStateBatch((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccSession) DeleteStateBatch(_batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.Contract.DeleteStateBatch(&_Scc.TransactOpts, _batchHeader)
}

// DeleteStateBatch is a paid mutator transaction binding the contract method 0xb8e189ac.
//
// Solidity: function deleteStateBatch((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccTransactorSession) DeleteStateBatch(_batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.Contract.DeleteStateBatch(&_Scc.TransactOpts, _batchHeader)
}

// FailVerification is a paid mutator transaction binding the contract method 0x9594dd64.
//
// Solidity: function failVerification((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccTransactor) FailVerification(opts *bind.TransactOpts, _batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.contract.Transact(opts, "failVerification", _batchHeader)
}

// FailVerification is a paid mutator transaction binding the contract method 0x9594dd64.
//
// Solidity: function failVerification((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccSession) FailVerification(_batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.Contract.FailVerification(&_Scc.TransactOpts, _batchHeader)
}

// FailVerification is a paid mutator transaction binding the contract method 0x9594dd64.
//
// Solidity: function failVerification((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccTransactorSession) FailVerification(_batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.Contract.FailVerification(&_Scc.TransactOpts, _batchHeader)
}

// SucceedVerification is a paid mutator transaction binding the contract method 0xe0c2b418.
//
// Solidity: function succeedVerification((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccTransactor) SucceedVerification(opts *bind.TransactOpts, _batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.contract.Transact(opts, "succeedVerification", _batchHeader)
}

// SucceedVerification is a paid mutator transaction binding the contract method 0xe0c2b418.
//
// Solidity: function succeedVerification((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccSession) SucceedVerification(_batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.Contract.SucceedVerification(&_Scc.TransactOpts, _batchHeader)
}

// SucceedVerification is a paid mutator transaction binding the contract method 0xe0c2b418.
//
// Solidity: function succeedVerification((uint256,bytes32,uint256,uint256,bytes) _batchHeader) returns()
func (_Scc *SccTransactorSession) SucceedVerification(_batchHeader Lib_OVMCodecChainBatchHeader) (*types.Transaction, error) {
	return _Scc.Contract.SucceedVerification(&_Scc.TransactOpts, _batchHeader)
}

// SccStateBatchAppendedIterator is returned from FilterStateBatchAppended and is used to iterate over the raw logs and unpacked data for StateBatchAppended events raised by the Scc contract.
type SccStateBatchAppendedIterator struct {
	Event *SccStateBatchAppended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SccStateBatchAppendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SccStateBatchAppended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SccStateBatchAppended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SccStateBatchAppendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SccStateBatchAppendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SccStateBatchAppended represents a StateBatchAppended event raised by the Scc contract.
type SccStateBatchAppended struct {
	BatchIndex        *big.Int
	BatchRoot         [32]byte
	BatchSize         *big.Int
	PrevTotalElements *big.Int
	ExtraData         []byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterStateBatchAppended is a free log retrieval operation binding the contract event 0x16be4c5129a4e03cf3350262e181dc02ddfb4a6008d925368c0899fcd97ca9c5.
//
// Solidity: event StateBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)
func (_Scc *SccFilterer) FilterStateBatchAppended(opts *bind.FilterOpts, _batchIndex []*big.Int) (*SccStateBatchAppendedIterator, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.FilterLogs(opts, "StateBatchAppended", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return &SccStateBatchAppendedIterator{contract: _Scc.contract, event: "StateBatchAppended", logs: logs, sub: sub}, nil
}

// WatchStateBatchAppended is a free log subscription operation binding the contract event 0x16be4c5129a4e03cf3350262e181dc02ddfb4a6008d925368c0899fcd97ca9c5.
//
// Solidity: event StateBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)
func (_Scc *SccFilterer) WatchStateBatchAppended(opts *bind.WatchOpts, sink chan<- *SccStateBatchAppended, _batchIndex []*big.Int) (event.Subscription, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.WatchLogs(opts, "StateBatchAppended", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SccStateBatchAppended)
				if err := _Scc.contract.UnpackLog(event, "StateBatchAppended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStateBatchAppended is a log parse operation binding the contract event 0x16be4c5129a4e03cf3350262e181dc02ddfb4a6008d925368c0899fcd97ca9c5.
//
// Solidity: event StateBatchAppended(uint256 indexed _batchIndex, bytes32 _batchRoot, uint256 _batchSize, uint256 _prevTotalElements, bytes _extraData)
func (_Scc *SccFilterer) ParseStateBatchAppended(log types.Log) (*SccStateBatchAppended, error) {
	event := new(SccStateBatchAppended)
	if err := _Scc.contract.UnpackLog(event, "StateBatchAppended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SccStateBatchDeletedIterator is returned from FilterStateBatchDeleted and is used to iterate over the raw logs and unpacked data for StateBatchDeleted events raised by the Scc contract.
type SccStateBatchDeletedIterator struct {
	Event *SccStateBatchDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SccStateBatchDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SccStateBatchDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SccStateBatchDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SccStateBatchDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SccStateBatchDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SccStateBatchDeleted represents a StateBatchDeleted event raised by the Scc contract.
type SccStateBatchDeleted struct {
	BatchIndex *big.Int
	BatchRoot  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStateBatchDeleted is a free log retrieval operation binding the contract event 0x8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd64.
//
// Solidity: event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) FilterStateBatchDeleted(opts *bind.FilterOpts, _batchIndex []*big.Int) (*SccStateBatchDeletedIterator, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.FilterLogs(opts, "StateBatchDeleted", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return &SccStateBatchDeletedIterator{contract: _Scc.contract, event: "StateBatchDeleted", logs: logs, sub: sub}, nil
}

// WatchStateBatchDeleted is a free log subscription operation binding the contract event 0x8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd64.
//
// Solidity: event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) WatchStateBatchDeleted(opts *bind.WatchOpts, sink chan<- *SccStateBatchDeleted, _batchIndex []*big.Int) (event.Subscription, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.WatchLogs(opts, "StateBatchDeleted", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SccStateBatchDeleted)
				if err := _Scc.contract.UnpackLog(event, "StateBatchDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStateBatchDeleted is a log parse operation binding the contract event 0x8747b69ce8fdb31c3b9b0a67bd8049ad8c1a69ea417b69b12174068abd9cbd64.
//
// Solidity: event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) ParseStateBatchDeleted(log types.Log) (*SccStateBatchDeleted, error) {
	event := new(SccStateBatchDeleted)
	if err := _Scc.contract.UnpackLog(event, "StateBatchDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SccStateBatchFailedIterator is returned from FilterStateBatchFailed and is used to iterate over the raw logs and unpacked data for StateBatchFailed events raised by the Scc contract.
type SccStateBatchFailedIterator struct {
	Event *SccStateBatchFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SccStateBatchFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SccStateBatchFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SccStateBatchFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SccStateBatchFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SccStateBatchFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SccStateBatchFailed represents a StateBatchFailed event raised by the Scc contract.
type SccStateBatchFailed struct {
	BatchIndex *big.Int
	BatchRoot  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStateBatchFailed is a free log retrieval operation binding the contract event 0x1723478079cff2362bd8896c78c4c8bee974428fc01131b52d79078349af3e10.
//
// Solidity: event StateBatchFailed(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) FilterStateBatchFailed(opts *bind.FilterOpts, _batchIndex []*big.Int) (*SccStateBatchFailedIterator, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.FilterLogs(opts, "StateBatchFailed", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return &SccStateBatchFailedIterator{contract: _Scc.contract, event: "StateBatchFailed", logs: logs, sub: sub}, nil
}

// WatchStateBatchFailed is a free log subscription operation binding the contract event 0x1723478079cff2362bd8896c78c4c8bee974428fc01131b52d79078349af3e10.
//
// Solidity: event StateBatchFailed(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) WatchStateBatchFailed(opts *bind.WatchOpts, sink chan<- *SccStateBatchFailed, _batchIndex []*big.Int) (event.Subscription, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.WatchLogs(opts, "StateBatchFailed", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SccStateBatchFailed)
				if err := _Scc.contract.UnpackLog(event, "StateBatchFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStateBatchFailed is a log parse operation binding the contract event 0x1723478079cff2362bd8896c78c4c8bee974428fc01131b52d79078349af3e10.
//
// Solidity: event StateBatchFailed(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) ParseStateBatchFailed(log types.Log) (*SccStateBatchFailed, error) {
	event := new(SccStateBatchFailed)
	if err := _Scc.contract.UnpackLog(event, "StateBatchFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SccStateBatchVerifiedIterator is returned from FilterStateBatchVerified and is used to iterate over the raw logs and unpacked data for StateBatchVerified events raised by the Scc contract.
type SccStateBatchVerifiedIterator struct {
	Event *SccStateBatchVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SccStateBatchVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SccStateBatchVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SccStateBatchVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SccStateBatchVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SccStateBatchVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SccStateBatchVerified represents a StateBatchVerified event raised by the Scc contract.
type SccStateBatchVerified struct {
	BatchIndex *big.Int
	BatchRoot  [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterStateBatchVerified is a free log retrieval operation binding the contract event 0xc032f530357a4853a125c129880b7801f1f30fb46fdd0e2f3bbc6e053199dca9.
//
// Solidity: event StateBatchVerified(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) FilterStateBatchVerified(opts *bind.FilterOpts, _batchIndex []*big.Int) (*SccStateBatchVerifiedIterator, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.FilterLogs(opts, "StateBatchVerified", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return &SccStateBatchVerifiedIterator{contract: _Scc.contract, event: "StateBatchVerified", logs: logs, sub: sub}, nil
}

// WatchStateBatchVerified is a free log subscription operation binding the contract event 0xc032f530357a4853a125c129880b7801f1f30fb46fdd0e2f3bbc6e053199dca9.
//
// Solidity: event StateBatchVerified(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) WatchStateBatchVerified(opts *bind.WatchOpts, sink chan<- *SccStateBatchVerified, _batchIndex []*big.Int) (event.Subscription, error) {

	var _batchIndexRule []interface{}
	for _, _batchIndexItem := range _batchIndex {
		_batchIndexRule = append(_batchIndexRule, _batchIndexItem)
	}

	logs, sub, err := _Scc.contract.WatchLogs(opts, "StateBatchVerified", _batchIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SccStateBatchVerified)
				if err := _Scc.contract.UnpackLog(event, "StateBatchVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStateBatchVerified is a log parse operation binding the contract event 0xc032f530357a4853a125c129880b7801f1f30fb46fdd0e2f3bbc6e053199dca9.
//
// Solidity: event StateBatchVerified(uint256 indexed _batchIndex, bytes32 _batchRoot)
func (_Scc *SccFilterer) ParseStateBatchVerified(log types.Log) (*SccStateBatchVerified, error) {
	event := new(SccStateBatchVerified)
	if err := _Scc.contract.UnpackLog(event, "StateBatchVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
